package com.davispcook.asymmetrik.executable;

import java.util.List;
import java.util.Scanner;

import com.davispcook.asymmetrik.AutocompleteProvider;
import com.davispcook.asymmetrik.Candidate;
import com.davispcook.asymmetrik.PassageTokenizer;

/**
 * Executable designed to allow for easy testing of the
 * challenge solution created for my job application to
 * Asymmetrik Fall 2017
 * 
 * Works as an interactive console with two modes, testing and
 * training
 * 
 * The console begins in training mode where training data is read from
 * STDIN and then fed to the train method of the AutcompleteProvider
 * 
 * The user can use control sequences to change modes:
 * - ">>>" changes to testing mode
 * - "<<<" changes to training mode
 * - "<>" quits out of the interactive console
 * 
 * The testing mode reads prefixes from STDIN and outputs the
 * autocomplete candidates generated by the getWords method on
 * the AutocompleteProvider
 * 
 * This interactive console is designed to highlight the ability of the AutocompleteProvider
 * to be "trained in an online manner" where additional training passages may be given to
 * the algorithm at the same time as it is being used to provide autocomplete suggestions
 * 
 * For example, one could start the interactive console, enter five lines of training data,
 * then obtain autocomplete suggestions for three different prefixes, then go back and enter
 * three more lines of training data, and then obtain new autocomplete suggestions for those
 * prefixes from earlier -> and the new autocomplete suggetions would be improved using the
 * second set of training data
 * 
 * @author Davis
 *
 */
public class Main {
	
	public static final String TEST_INDICATOR = ">>>";
	public static final String TRAIN_INDICATOR = "<<<";
	public static final String EXIT_INDICATOR = "<>";
	
	public static boolean isValidInput(String input) {
		char[] inputAsCharArray = input.toCharArray();
		for (int i = 0; i < inputAsCharArray.length; i++) {
			if (!PassageTokenizer.isLowercaseAlphabetic(inputAsCharArray[i])) {
				return false;
			}
		}
		return true;
	}
	
	public static void main(String[] args) {
		AutocompleteProvider acProvider = new AutocompleteProvider();
		Scanner input = new Scanner(System.in);
		ExecutionMode state = ExecutionMode.TRAINING;
		System.out.println("=== AUTOCOMPLETE INTERACTIVE TEST CONSOLE ===");
		System.out.println("In TRAINING MODE you may enter training data separated by newline characters to train the AutocompleteProvider with");
		System.out.println("In TESTING MODE you may enter prefixes separated by newline characters for the AutocompleteProvider to provide its autocomplete candidates for");
		System.out.println("TYPE \">>>\" to switch to TESTING mode, TYPE \"<<<\" to switch to TRAINING mode, or TYPE \"<>\" to quit");
		System.out.println("Starting in TRAINING MODE:");
		while (input.hasNextLine()) {
			String line = input.nextLine();
			// swap states if necessary
			if (line.equals(TEST_INDICATOR)) {
				state = ExecutionMode.TESTING;
				System.out.println("=== Switched to TESTING MODE: ===");
				continue;
			} else if (line.equals(TRAIN_INDICATOR)) {
				state = ExecutionMode.TRAINING;
				System.out.println("=== Switched to  TRAINING MODE: ===");
				continue;
			} else if (line.equals(EXIT_INDICATOR)) {
				System.out.println("=== EXITING INTERACTIVE TEST CONSOLE ===");
				break;
			}
			
			if (state == ExecutionMode.TRAINING) {
				acProvider.train(line);
				System.out.println("TRAINED: \"" + line + "\"");
			} else if (state == ExecutionMode.TESTING) {
				System.out.println("INPUT: \"" + line + "\"");
				if (!isValidInput(line)) {
					System.out.println("INVALID input for prefix - only lowercase alphabet characters are allowed");
					continue;
				}
				List<Candidate> candidates = acProvider.getWords(line);
				for (Candidate candidate : candidates) {
					System.out.println("\"" + candidate.getWord() + "\" (" + candidate.getConfidence() + ")");
				}
			}

		}
		input.close();
	}
	
}
